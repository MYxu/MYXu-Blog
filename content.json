{"pages":[{"title":"404 Not Found：该页无法显示","date":"2017-09-15T07:01:24.436Z","updated":"2017-09-15T07:01:24.436Z","comments":false,"path":"/404.html","permalink":"https://myxu.github.io/hexo//404.html","excerpt":"","text":""},{"title":"About me","date":"2017-11-15T16:01:53.900Z","updated":"2017-11-15T16:01:53.900Z","comments":false,"path":"about/index.html","permalink":"https://myxu.github.io/hexo/about/index.html","excerpt":"","text":""},{"title":"分类","date":"2017-11-15T17:01:43.939Z","updated":"2017-11-15T17:01:43.939Z","comments":false,"path":"categories/index.html","permalink":"https://myxu.github.io/hexo/categories/index.html","excerpt":"","text":""},{"title":"我的书单","date":"2017-11-15T17:01:27.841Z","updated":"2017-11-15T17:01:27.841Z","comments":false,"path":"books/index.html","permalink":"https://myxu.github.io/hexo/books/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2017-11-15T17:02:08.303Z","updated":"2017-11-15T17:02:08.303Z","comments":true,"path":"links/index.html","permalink":"https://myxu.github.io/hexo/links/index.html","excerpt":"","text":""},{"title":"Repository","date":"2017-09-15T06:57:24.440Z","updated":"2017-09-15T06:57:24.440Z","comments":false,"path":"repository/index.html","permalink":"https://myxu.github.io/hexo/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2017-11-15T17:02:31.758Z","updated":"2017-11-15T17:02:31.758Z","comments":false,"path":"tags/index.html","permalink":"https://myxu.github.io/hexo/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"自动部署测试","slug":"自动部署测试","date":"2019-07-07T04:14:55.000Z","updated":"2019-07-07T04:50:39.697Z","comments":true,"path":"2019/07/07/自动部署测试/","link":"","permalink":"https://myxu.github.io/hexo/2019/07/07/自动部署测试/","excerpt":"","text":"测试一下github+webhook的自动部署12","categories":[{"name":"自动部署","slug":"自动部署","permalink":"https://myxu.github.io/hexo/categories/自动部署/"}],"tags":[{"name":"自动部署","slug":"自动部署","permalink":"https://myxu.github.io/hexo/tags/自动部署/"}]},{"title":"IDEA 部署JavaWeb项目到远程服务器的Tomcat","slug":"IDEA-部署JavaWeb项目到远程服务器的Tomcat","date":"2018-04-28T17:57:25.000Z","updated":"2018-05-17T17:28:30.858Z","comments":true,"path":"2018/04/29/IDEA-部署JavaWeb项目到远程服务器的Tomcat/","link":"","permalink":"https://myxu.github.io/hexo/2018/04/29/IDEA-部署JavaWeb项目到远程服务器的Tomcat/","excerpt":"","text":"前言应用场景 在本地IDEA下开发JavaWeb项目并部署到远程服务器上的Tomcat，传统方式是在本地运行项目生成war文件.但其实我们可以通过IDEA以及相关配置，来实现在IDEA运行项目的同时自动将项目上传部署到服务器上的Tomcat。 实验环境、工具 腾讯云服务器 CentOS 7.2 64位 Xshell：用于在本地连接腾讯云服务器，远程操作服务器的终端 IDEA 2017.2旗舰版(Ultimate) 本地 Windows10 OS 必须的环境配置 远程服务器上面必须先安装JDK跟Tomcat，确保能正常访问到Tomcat默认的主页 java-1.8.0-openjdk，参考CentOS yum 安装JDK8 Tomcat9.0.7，参考CentOS7 安装Tomcat9 服务器端配置相关配置 参考IDEA官网的相关配置，来启动jmx。 cd /usr/local/webDevelopmentTools/tomcat/apache-tomcat-9.0.7/bin &nbsp;(Tomcat安装目录下的bin文件夹) vim catalina.sh 在catalina.sh文件最前面添加以下配置 12345678910export CATALINA_OPTS=&quot;-Dcom.sun.management.jmxremote-Dcom.sun.management.jmxremote.port=10999 （替换成你的服务器可用的端口）-Dcom.sun.management.jmxremote.ssl=false-Dcom.sun.management.jmxremote.authenticate=false-Djava.rmi.server.hostname=119.29.251.126&quot; （替换成你的服务器IP）export JAVA_OPTS=&quot;-Dcom.sun.management.jmxremote=-Dcom.sun.management.jmxremote.port=10999-Dcom.sun.management.jmxremote.ssl=false-Dcom.sun.management.jmxremote.authenticate=false&quot; 注意：在配置端口之前需要检测一下配置的端口是否可用。 12netstat -anp | grep 1099(需要检测的端口号) 该命令用于检测端口是否可用，若是没有任何显示信息则说明可用 配置后Tomcat的启动方式 配置前在这之前基本都是通过systemctl start xxxx.service的方式来启动Tomcat，其实本质就是执行Tomcat安装目录下bin文件夹中的startup.sh脚本去启动的。配置后现在我们则需要通过catalina.sh脚本来启动Tomcat，该脚本同样是在Tomcat安装目录下的bin目录。12cd /usr/local/webDevelopmentTools/tomcat/apache-tomcat-9.0.7/bincatalina.sh run &gt; /dev/null 2&gt;&amp;1 &amp; 其中“ &gt; /dev/null 2&gt;&amp;1 &amp;”是Linux中的命令：把标准输出和出错处理都放到回收站，这样就免得一大堆输出占领你的屏幕。 启动之后，使用命令jps,若出现下面类似信息则说明配置成功或者通过浏览器去访问Tomcat的默认主页来检测。 本地配置IDEA创建JavaWeb项目 使用IDEA创建一个JavaWeb项目来进行测试，如何在IDEA创建一个JavaWeb项目参考 IDEA的Tomcat配置 进行IDEA的Tomcat配置，选择Edit Configurations 新建一个Tomcat配置，跟以往的配置不同的是这次选择的Tomcat Server是Remote，即远程的服务器上Tomcat 运行配置名称、运行Tomcat版本、访问URL的配置、远程服务器上Tomcat连接配置 注意：在选择Tomcat版本时，所选择的只能看到本地的Tomcat，因此为了保证运行Tomcat的版本配置的正确，所以最好保证本地的Tomcat与远程服务器上的Tomcat版本一致，即本地安装的Tomcat与服务器上安装的Tomcat版本一致 远程服务器上Tomcat的配置 配置连接类型以及创建一个新的服务器连接配置 创建一个新的服务器连接配置则会出现以下窗口 配置服务器连接信息 选择上一步配置的服务器连接信息 配置Deployment 配置jmx端口，即与前面服务器配置的Dcom.sun.management.jmxremote.port一致 部署测试 保存以上配置之后运行前面配置的远程Tomcat配置 参考链接 https://blog.csdn.net/u010100466/article/details/72614545 https://www.jetbrains.com/help/idea/2016.1/run-debug-configuration-tomcat-server.html https://blog.csdn.net/u012188141/article/details/80039942","categories":[{"name":"IDEA的使用","slug":"IDEA的使用","permalink":"https://myxu.github.io/hexo/categories/IDEA的使用/"}],"tags":[{"name":"Tomcat","slug":"Tomcat","permalink":"https://myxu.github.io/hexo/tags/Tomcat/"},{"name":"IDEA","slug":"IDEA","permalink":"https://myxu.github.io/hexo/tags/IDEA/"}]},{"title":"CentOS7 安装Tomcat9","slug":"CentOS7-安装Tomcat9","date":"2018-04-27T16:41:35.000Z","updated":"2018-04-28T07:12:35.481Z","comments":true,"path":"2018/04/28/CentOS7-安装Tomcat9/","link":"","permalink":"https://myxu.github.io/hexo/2018/04/28/CentOS7-安装Tomcat9/","excerpt":"","text":"前言此次实验环境以及涉及的工具 腾讯云服务器 CentOS 7.2 64位 Xshell：用于在本地连接腾讯云服务器，远程操作服务器的终端 FileZilla：本地连接远程服务器，主要用于服务器与本地电脑之间的文件传输 已安装JDK(必须) 在安装Tomcat之前必须先安装JDK,在这之前我已经通过yum安装了java-1.8.0-openjdk，可以参考CentOS7 yum 安装 JDK8 下载安装 Tomcat9通过Xshell连接上腾讯云服务器 进入/usr/local目录中创建所需的文件夹123cd /usr/localmkdir -p tools(用于保存下载或者上传上来的Tomcat文件)mkdir -p webDevelopmentTools/tomcat(为了方便管理统一将Tomcat都安装到该目录) 进入/usr/local/tools，下载Tomcat9的安装文件12安装wget(若安装过忽略)：yum -y install wget通过wget下载Tomcat：wget http://archive.apache.org/dist/tomcat/tomcat-9/v9.0.7/bin/apache-tomcat-9.0.7.tar.gz 对于这个下载链接大家需要注意的是Tomcat版本问题，比如若想安装的是Tomcat7，那你需要到Tomcat官网找到他对应的详细版本号替换成如下1http://archive.apache.org/dist/tomcat/tomcat-7/v7.0.86/bin/apache-tomcat-7.0.86.tar.gz 当然如果实在找不到下载的链接，可以直接到官网下载然后再通过FileZilla上传到服务器，说实话FileZilla能更直观地操作服务器上面的文件。 将下载到的文件(apache-tomcat-9.0.7.tar.gz)进行解压123/usr/local/tools/解压：tar -zxvf apache-tomcat-9.0.7.tar.gz 复制解压文件到指定安装目录解压之后将得到一个apache-tomcat-9.0.7文件夹，需要将其复制到指定的安装目录/usr/local/webDevelopmentTools/tomcat/apache-tomcat-9.0.7/,因为我可能会安装多个版本的Tomcat，因此我在tomcat目录下又以Tomcat的版本号来区分存放。1mv apache-tomcat-9.0.7 ../webDevelopmentTools/tomcat/apache-tomcat-9.0.7/ 这样，Tomcat9的下载安装已经完成，剩下的就是完成相关配置。 Tomcat的相关配置 配置Tomcat环境变量 cd /etc vim profile (小白不懂vim自己Google) 在profile文件后面添加如下配置，涉及到的路径修改成自己实际安装的路径即可 1234CATALINA_HOME=/usr/local/webDevelopmentTools/tomcat/apache-tomcat-9.0.7CATALINA_BASE=/usr/local/webDevelopmentTools/tomcat/apache-tomcat-9.0.7PATH=$PATH:$CATALINA_BASE/binexport PATH CATALINA_BASE 配置Tomcat开机自启 cd /usr/lib/systemd/system mkdir tomcat9.service vim tomcat9.service 在Tomcat9.service文件中完成如下配置，路径需要修改成自己实际安装的路径 12345678910111213[Unit]Description=TomcatAfter=syslog.target network.target remote-fs.target nss-lookup.target[Service]Type=oneshotExecStart=/usr/local/webDevelopmentTools/tomcat/apache-tomcat-9.0.7/bin/startup.shExecStop=/usr/local/webDevelopmentTools/tomcat/apache-tomcat-9.0.7/bin/shutdown.shExecReload=/bin/kill -s HUP $MAINPIDRemainAfterExit=yes[Install]WantedBy=multi-user.target 保存退出之后，执行systemctl enable tomcat9.service,使Tomcat9开机自启。Tomcat的其他操作如下： 启动Tomcat：systemctl start tomcat9.service 关闭Tomcat：systemctl stop tomcat9.service 重启Tomcat：systemctl restart tomcat9.service 查看Tomcat状态：systemctl status tomcat9.service 进入tomcat安装目录下的bin目录，执行startup.sh or shutdown.sh也可以开启/关闭Tomcat 完成以上的配置就可以访问Tomcat了，在浏览器输入http://ip:8080,出现Tomcat主页则说明安装成功了。 修改Tomcat的访问端口有时候8080端口可能会被其他服务占用，而导致Tomcat无法正常工作，因此很有必要知道怎么改Tomcat的访问端口。 首先，可以了解一下如何查看某个端口是否被占用： netstat -anp | grep 8080 若没有任何信息显示则说明该端口可使用，若是出现类似下面信息则说明该端口不可用 接下来就可以按照下面步骤来修改可使用的端口号了： cd /usr/local/webDevelopmentTools/tomcat/apache-tomcat-9.0.7/conf (需要替换成你的Tomcat按照目录) vim server.xml 修改下面配置","categories":[{"name":"java开发环境搭建","slug":"java开发环境搭建","permalink":"https://myxu.github.io/hexo/categories/java开发环境搭建/"}],"tags":[{"name":"java","slug":"java","permalink":"https://myxu.github.io/hexo/tags/java/"},{"name":"Tomcat","slug":"Tomcat","permalink":"https://myxu.github.io/hexo/tags/Tomcat/"}]},{"title":"Hexo博客文章插入图片方式","slug":"Hexo博客文章插入图片方式","date":"2018-04-26T14:58:30.000Z","updated":"2018-04-26T15:05:20.244Z","comments":true,"path":"2018/04/26/Hexo博客文章插入图片方式/","link":"","permalink":"https://myxu.github.io/hexo/2018/04/26/Hexo博客文章插入图片方式/","excerpt":"","text":"前言通常我们在写博客文章的时候总免不了插入一些图片进行说明，而对于hexo来说主要有以下两种方式来引入图片： 将图片存放在本地引用 将图片上传至一些CDN服务上，在通过链接引用 这里我就主要说明第一种方式是如何实现。 本地引用绝对路径若是Hexo博客中只用到少数的图片的时，可以在hexo项目source文件夹下创建一个images文件夹统一存放需要的图片，然后再通过markdown语法访问即可。 12345678---source |---_post(文章存放文件夹) | |---pictureTest.md | |---_images（图片存放文件夹） |---picture.pngmarkdown访问图片：![文字说明](/images/picture.png) 注意：这样的方式，图片不仅可以在文章中引用，还可以在首页内容中访问。 相对路径上面的访问方式不好的地方就是图片多时容易混杂，不容易找到所需的。因此，一般最好对应文章引用的图片存放在相对应的目录。目前hexo已经实现了在创建新文章的时候创建对应的文章目录： hexo项目下_config.yml文件1post_asset_folder:true 完成上述设置之后，在创建新文章的时候（hexo new “artice_name”），hexo会自动在文章同级目录下创建一个与文章同名的目录，我们可以将与文章相关的资源放置在该目录下，便于管理所需的资源。12345---source |---_post(文章存放文件夹) | |---pictureTest.md | | | |---pictureTest(与文章同名的文件夹) 注意了：使用该方式在markdown文章中将不能再采用markdown语法或者相对路径去引用图片了，有可能会造成资源显示不正确。1引用语法：&#123;% asset_img pictureTest.png this is an example image desc %&#125; 若是想使用该方式的同时能使用markdown语法，则需要安装插件1在hexo项目下：install https://github.com/CodeFalling/hexo-asset-image --save 即可使用markdown语法访问:1![image desc](/pictureTest.jpg) CDN这种方式一般是将图片上传至CDN中存储，同时得到图片的访问链接。常见比如七牛云，有空可以去尝试一下。 相关链接 https://hexo.io/zh-cn/docs/asset-folders.html https://yanyinhong.github.io/2017/05/02/How-to-insert-image-in-hexo-post/ https://www.jianshu.com/p/c2ba9533088a","categories":[{"name":"hexo","slug":"hexo","permalink":"https://myxu.github.io/hexo/categories/hexo/"}],"tags":[{"name":"hexo文章插入图片","slug":"hexo文章插入图片","permalink":"https://myxu.github.io/hexo/tags/hexo文章插入图片/"}]},{"title":"centOS7 yum安装JDK8","slug":"centOS7yum安装JDK8","date":"2018-04-26T07:43:33.000Z","updated":"2018-04-26T12:41:21.117Z","comments":true,"path":"2018/04/26/centOS7yum安装JDK8/","link":"","permalink":"https://myxu.github.io/hexo/2018/04/26/centOS7yum安装JDK8/","excerpt":"","text":"开发环境 腾讯云服务器 CentOS 7.2 64位 检查系统是否已自带open-jdk命令 rpm -qa | grep java 或者 rpm -qa | grep jdk ps:如果没有显示则说明尚未安装jdk，若是已经安装可以通过命令rpm -qa | grep java | xargs rpm -e --nodeps批量卸载所有带java的文件 安装openjdk(无需配置path环境变量)检索yum源中的jdk包命令 yum list java* yum list java-1.8*(指定搜索1.8版本) 通过以上命令可以检索出当前yum源中openjdk版本为1.8.0 安装1.8版本的open-jdk这里我们需要安装java-1.8版本的所有文件，安装命令： yum install -y java-1.8.0-openjdk* 检查是否安装成功命令 java -version 出现以上类似信息则说明安装成功了。","categories":[{"name":"java开发环境搭建","slug":"java开发环境搭建","permalink":"https://myxu.github.io/hexo/categories/java开发环境搭建/"}],"tags":[{"name":"java","slug":"java","permalink":"https://myxu.github.io/hexo/tags/java/"},{"name":"jdk","slug":"jdk","permalink":"https://myxu.github.io/hexo/tags/jdk/"}]},{"title":"心情不好","slug":"in-bad-mod","date":"2017-12-04T15:10:23.000Z","updated":"2017-12-04T15:31:28.085Z","comments":true,"path":"2017/12/04/in-bad-mod/","link":"","permalink":"https://myxu.github.io/hexo/2017/12/04/in-bad-mod/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"手动创建Oracle数据库","slug":"manualy-creating-the-oracle-database","date":"2017-11-15T17:09:49.000Z","updated":"2017-12-04T15:31:28.633Z","comments":true,"path":"2017/11/16/manualy-creating-the-oracle-database/","link":"","permalink":"https://myxu.github.io/hexo/2017/11/16/manualy-creating-the-oracle-database/","excerpt":"","text":"电脑没电了，明天再整理。辣鸡学校，天天断电…","categories":[{"name":"Oracle","slug":"Oracle","permalink":"https://myxu.github.io/hexo/categories/Oracle/"}],"tags":[{"name":"Oracle","slug":"Oracle","permalink":"https://myxu.github.io/hexo/tags/Oracle/"}]},{"title":"hello hexo","slug":"helo-hexo","date":"2017-09-15T05:45:24.000Z","updated":"2018-05-18T04:23:36.504Z","comments":true,"path":"2017/09/15/helo-hexo/","link":"","permalink":"https://myxu.github.io/hexo/2017/09/15/helo-hexo/","excerpt":"搞了一天，基本将自己想要的东西都弄好了，接下来就要好好坚持总结、写技术博客了","text":"搞了一天，基本将自己想要的东西都弄好了，接下来就要好好坚持总结、写技术博客了","categories":[{"name":"hexo","slug":"hexo","permalink":"https://myxu.github.io/hexo/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://myxu.github.io/hexo/tags/hexo/"},{"name":"php","slug":"php","permalink":"https://myxu.github.io/hexo/tags/php/"}]}]}